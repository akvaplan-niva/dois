#!/usr/bin/env bash

nd-map '{patches} = await import(Deno.cwd()+"/deno/patch/patches.js"),
authors = (d.author??[]).map(({family,given,name,sequence}) =>(
  { family: family?.replace(/[0-9\*]/, ""), given, name, first: sequence === "first" ? true : undefined })),

  doi = d.DOI,
  title = d.title && d.title.length ? d.title.join(" | ") : doi,
  container = d["container-title"] ? d["container-title"][0] : null,

  type = "preprint" === d?.subtype ? d.subtype : d.type,
  type = /errat(um|a)/i.test(title) ? "erratum": type,

  iso = (p,i=0) => p.map(n => 0===i++ ? String(n) : String(n).padStart(2,"0")).join("-"),
  online = d["published-online"] ? d["published-online"]["date-parts"][0] : [],
  _print = d["published-print"] ? d["published-print"]["date-parts"][0] : [],
  _published = d["published"] ? d["published"]["date-parts"][0] : [],
  dates = [iso(online),iso(_print),iso(_published)].filter(s=>s?.length>=4),
  published = dates && dates.length > 0 ? dates.sort()[0] : null,

  cc = (d.license??[]).map(({URL})=>URL).find((url) => /creativecommons\.org/.test(url)),
  creativecommons = cc ? cc.match(/\/(licenses|publicdomain)\/([^/]+)/)[2] : undefined,

  cites = d["is-referenced-by-count"],

  license = creativecommons ? `cc-${creativecommons}` : undefined,
  printed = _print && _print.length ? iso(_print) : undefined,
  slim = { published, printed, type, container, title, authors, doi, license, cites },
  patches.has(doi) ? ({ doi, ...slim, ...patches.get(doi)}): slim'
